/**
 * FILE IS GENERATED BY CODEGEN SCRIPT, WHICH IMPLEMENTS ALL 
 * COMPONENT TYPES. DO NOT EDIT THIS FILE DIRECTLY.
 * 
 * Implements a "prototype" which is a cached base configuration
 * for a vehicle. This is used to create new vehicles. Rough process
 * involves using prototype as base then injecting specific data
 * for vehicle creation.
 * 
 *               Spawning                 Spawning from
 *              from item:                  save data
 * 
 *              prototype                   prototype 
 *                  |                           |     
 *                  |                           |     
 *     item         v              save         v     
 *     data ------> +              data ------> +     
 *                  |                           |     
 *                  |                           |     
 *    player        v                           |     
 *    event ------> +                           |     
 *     data         |                           |     
 *                  |                           |     
 *                  v                           v     
 *              components                  components
 */

package phonon.xv.core

import java.nio.file.Path
import java.util.EnumSet
import java.util.logging.Logger
import org.tomlj.Toml
import org.tomlj.TomlTable
import phonon.xv.component.*


/**
 * VehiclePrototype defines elements in a vehicle. Used as a base
 * object to create new vehicles.
 */
public data class VehiclePrototype(
    val name: String,
    val elements: Array<VehicleElementPrototype>,
) {
    companion object {
        /**
         * Try to load a vehicle prototype from a toml file.
         * If any of the internal elements fails to parse, this will
         * print an error and return a null.
         */
        public fun fromTomlFile(source: Path, logger: Logger? = null): VehiclePrototype? {
            try {
                val toml = Toml.parse(source)

                val name = toml.getString("name") ?: ""

                // if this contains an elements table, parse each element
                // else, parse entire doc as single toml table
                val elements: Array<VehicleElementPrototype> = toml.getArray("elements")?.let { elems ->
                    ( 0 until elems.size() )
                    .map { i -> VehicleElementPrototype.fromToml(elems.getTable(i)) }
                    .toTypedArray()
                } ?: arrayOf(VehicleElementPrototype.fromToml(toml))

                return VehiclePrototype(name, elements)
            } catch (e: Exception) {
                logger?.warning("Failed to parse landmine file: ${source.toString()}, ${e}")
                e.printStackTrace()
                return null
            }
        }
    }
}

/**
 * VehicleElementPrototype defines a vehicle element's initial components.
 * Contains all possible components, but only the ones in layout should
 * be non-null.
 */
public data class VehicleElementPrototype(
    val name: String,
    val parent: String?,
    val layout: EnumSet<VehicleComponentType>,
    {%- for c in components %}
    val {{ c.storage }}: {{ c.component }}? = null,
    {%- endfor %}
) {
    companion object {
        public fun fromToml(toml: TomlTable, logger: Logger? = null): VehicleElementPrototype {
            // element built-in properties
            val name = toml.getString("name") ?: ""
            val parent = toml.getString("parent")
            
            // all possible components to be parsed
            {%- for c in components %}
            var {{ c.storage }}: {{ c.component }}? = null
            {%- endfor %}

            // parse components from matching keys in toml
            val layout = EnumSet.noneOf(VehicleComponentType::class.java)
            val keys = toml.keySet()
            for ( k in keys ) {
                when ( k ) {
                    "name", "parent" -> continue
                    {%- for c in components %}
                    "{{ c.config_name }}" -> {
                        layout.add(VehicleComponentType.{{ c.enum }})
                        {{ c.storage }} = {{ c.component }}.fromToml(toml.getTable(k)!!, logger)
                    }
                    {%- endfor %}
                    else -> logger?.warning("Unknown key in vehicle element: $k")
                }
            }
            
            return VehicleElementPrototype(
                name,
                parent,
                layout,
                {%- for c in components %}
                {{ c.storage }},
                {%- endfor %}
            )
        }
    }
}
