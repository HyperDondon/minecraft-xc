/**
 * FILE IS GENERATED BY CODEGEN SCRIPT, WHICH GENERATES SERIALIZATION
 * AND DERSERIALIZATION CODE. DO NOT EDIT THIS FILE DIRECTLY.
 *
 * Implements extension functions for VehicleElement and Vehicle which
 * serializes these objects into JsonObjects for use in the saving and
 * loading extension functions.
 *
 * JSON schema for vehicles: (Quotes for field names excluded)
 * ========saved_vehicles.json===========
 * {
 *    vehicles: [
 *        {
 *            uuid: "uuid here",
 *            prototype: "test_vehicle",
 *            elements: {
 *                elementPrototype1: {
 *                    uuid: "uuid here",
 *                    components: {
 *                        fuel: {
 *                            current = 0
 *                        },
 *                        health: {
 *                            current = 20
 *                        },
 *                        landMovementControls: {
 *                            speed: 10.0,
 *                            yawRotationSpeed: 20.0
 *                        },
 *                        transform: {
 *                            world: "world",
 *                            x: 20.0,
 *                            y: 81.0,
 *                            z: 20.0
 *                        }
 *                    }
 *                },
 *                elementPrototype2: {
 *                    uuid: "uuid here",
 *                    components: {
 *                        fuel: {
 *                            current = 0
 *                        },
 *                        health: {
 *                            current = 20
 *                        },
 *                        landMovementControls: {
 *                            speed: 10.0,
 *                            yawRotationSpeed: 20.0
 *                        },
 *                        transform: {
 *                            world: "world",
 *                            x: 20.0,
 *                            y: 81.0,
 *                            z: 20.0
 *                        }
 *                    }
 *                }
 *            }
 *        }
 *    ]
 * }
 * =======FILE END=========
 * Note that each element stored in the `elements` field is indexed
 * by the name of its prototype. The object itself does not actually contain any name.
 * The save state of each component is structured similarly. They are identified
 * by the field they are stored in, rather than their actual contents. This is
 * simply for faster
 */

package phonon.xv.core

import com.google.gson.Gson
import com.google.gson.GsonBuilder
import com.google.gson.JsonArray
import com.google.gson.JsonObject
import com.google.gson.JsonParser
import com.google.gson.JsonPrimitive
import phonon.xv.XV
import phonon.xv.component.*
import phonon.xv.system.CreateVehicleReason
import phonon.xv.system.CreateVehicleRequest
import java.io.FileReader
import java.io.FileWriter
import java.nio.file.Path
import java.util.logging.Logger

/**
 * Extension function to serialize VehicleElement to
 * a JsonObject. XV instance is needed to pass into
 * VehicleElement toJson function.
 */
fun VehicleElement.toJson(xv: XV): JsonObject {
    val json = JsonObject()
    json.addProperty("uuid", this.uuid.toString())
    val componentsJson = JsonObject()
    val archetype = xv.storage.lookup[this.layout]!!
    for ( c in this.layout ) {
        // serialize component state in json
        val cJson = when ( c ) {
            VehicleComponentType.AMMO -> archetype.getComponent<AmmoComponent>(this.id)!!.toJson()
            VehicleComponentType.FUEL -> archetype.getComponent<FuelComponent>(this.id)!!.toJson()
            VehicleComponentType.GUN_BARREL -> archetype.getComponent<GunBarrelComponent>(this.id)!!.toJson()
            VehicleComponentType.GUN_TURRET -> archetype.getComponent<GunTurretComponent>(this.id)!!.toJson()
            VehicleComponentType.HEALTH -> archetype.getComponent<HealthComponent>(this.id)!!.toJson()
            VehicleComponentType.LAND_MOVEMENT_CONTROLS -> archetype.getComponent<LandMovementControlsComponent>(this.id)!!.toJson()
            VehicleComponentType.MODEL -> archetype.getComponent<ModelComponent>(this.id)!!.toJson()
            VehicleComponentType.SEATS -> archetype.getComponent<SeatsComponent>(this.id)!!.toJson()
            VehicleComponentType.SEATS_RAYCAST -> archetype.getComponent<SeatsRaycastComponent>(this.id)!!.toJson()
            VehicleComponentType.SPAWN -> archetype.getComponent<SpawnComponent>(this.id)!!.toJson()
            VehicleComponentType.TRANSFORM -> archetype.getComponent<TransformComponent>(this.id)!!.toJson()
            else -> throw Exception("Unknown component type: $c")
        }
        // add this json to our components object
        if ( cJson !== null ) {
            // just get storage string of
            val propertyLabel = when ( c ) {
                VehicleComponentType.AMMO -> "ammo"
                VehicleComponentType.FUEL -> "fuel"
                VehicleComponentType.GUN_BARREL -> "gunBarrel"
                VehicleComponentType.GUN_TURRET -> "gunTurret"
                VehicleComponentType.HEALTH -> "health"
                VehicleComponentType.LAND_MOVEMENT_CONTROLS -> "landMovementControls"
                VehicleComponentType.MODEL -> "model"
                VehicleComponentType.SEATS -> "seats"
                VehicleComponentType.SEATS_RAYCAST -> "seatsRaycast"
                VehicleComponentType.SPAWN -> "spawn"
                VehicleComponentType.TRANSFORM -> "transform"
                else -> throw Exception("Unknown component type: $c")
            }
            // add parsed component state to our component object
            componentsJson.add(propertyLabel, cJson)
        }
    }
    json.add("components", componentsJson)
    return json
}

fun Vehicle.toJson(xv: XV): JsonObject {
    val json = JsonObject()
    json.addProperty("uuid", this.uuid.toString())
    json.addProperty("prototype", this.prototype.name)
    val elementsJson = JsonObject()
    for ( elt in this.elements ) {
        elementsJson.add(elt.prototype.name, elt.toJson(xv))
    }
    json.add("elements", elementsJson)
    return json
}

/**
 * Save all vehicles as json. Called during shutdown/restart.
 * This function is intended to be run on the main thread, so
 * while it is backup safe,
 */
fun XV.saveVehicles(saveTo: Path, logger: Logger? = null) {
    try {
        val xv = this
        // set up json stuff
        val json = JsonObject()
        val vehiclesArrayJson = JsonArray()
        // iterate and parse vehicles
        for (vehicle in xv.vehicleStorage) {
            vehiclesArrayJson.add(vehicle.toJson(xv))
        }
        json.add("vehicles", vehiclesArrayJson)

        // json object built, now we gotta do the IO
        val saveFile = saveTo.toFile()

        // create new file if not exists
        if (!saveFile.exists())
            saveFile.createNewFile()

        // gson lib instance, handles parsing
        val gson = if (xv.config.savePrettyPrintingJson) {
            GsonBuilder()
                    .setPrettyPrinting()
                    .create()
        } else {
            Gson()
        }

        // write data
        FileWriter(saveFile).use {
            gson.toJson(json, it)
        }
    } catch ( e: Exception ) {
        logger?.severe("Encountered an issue saving vehicle data from file: $saveTo")
    }
}

/**
 * Load all vehicles from json file. Called during
 * startup/restart. This can also be called during runtime,
 * but make sure to clear all the storages first!
 */
fun XV.loadVehicles(readFrom: Path, logger: Logger? = null) {
    try {
        val xv = this
        // IO
        val file = readFrom.toFile()
        if ( !file.exists() )
            return

        val json = FileReader(file).use {
            JsonParser.parseReader(it)
        }.asJsonObject

        val vehiclesArrayJson = json["vehicles"].asJsonArray
        for ( vehicleJson in vehiclesArrayJson ) {
            if ( vehicleJson is JsonObject ) {
                val prototype = xv.vehiclePrototypes[ vehicleJson["prototype"]!!.asString ]!!

                xv.createRequests.add(
                        CreateVehicleRequest(
                                prototype,
                                CreateVehicleReason.NEW,
                                json = json
                        )
                )
            } else {
                logger?.warning("Encountered malformed JSON structure while loading save data from file: ${file}")
            }
        }
    } catch ( e: Exception ) {
        logger?.severe("Encountered an issue loading vehicle data from file: $readFrom")
    }
}