/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package phonon.xv.test.core

import kotlin.test.Test
import kotlin.test.assertNotNull
import kotlin.test.assertNull
import kotlin.test.assertEquals
import kotlin.test.assertContentEquals
import kotlin.test.fail

import java.util.EnumSet
import java.util.logging.ConsoleHandler
import java.util.logging.Logger
import phonon.xv.component.*
import phonon.xv.core.*


public class PrototypeTest() {

    /**
     * Test prototype creation element hierarchy sorting.
     */
    @Test
    fun sorting() {
        // Obtains Logger instance
        val logger = Logger.getLogger(PrototypeTest::class.java.getName())

        // Add ConsoleHandler to Logger.
        val consoleHandler = ConsoleHandler()
        logger.addHandler(consoleHandler)
        
        val unsortedElementPrototypes = arrayListOf(
            VehicleElementPrototype(
                name="base",
                parent=null,
                vehicleName="debug",
                layout=EnumSet.noneOf(VehicleComponentType::class.java),
            ),
            VehicleElementPrototype(
                name="child1",
                parent="base",
                vehicleName="debug",
                layout=EnumSet.noneOf(VehicleComponentType::class.java),
            ),
            VehicleElementPrototype(
                name="child2",
                parent="child1",
                vehicleName="debug",
                layout=EnumSet.noneOf(VehicleComponentType::class.java),
            ),
            VehicleElementPrototype(
                name="child3",
                parent="base",
                vehicleName="debug",
                layout=EnumSet.noneOf(VehicleComponentType::class.java),
            ),
            VehicleElementPrototype(
                name="child4",
                parent="base",
                vehicleName="debug",
                layout=EnumSet.noneOf(VehicleComponentType::class.java),
            ),
        )

        val vehiclePrototype = VehiclePrototype.fromUnsortedElements(
            "debug",
            "Debug",
            listOf(),
            unsortedElementPrototypes,
            logger=logger,
        )

        assertNotNull(vehiclePrototype, "Vehicle prototype should not be null")
    
        // verify root elements
        assertEquals(1, vehiclePrototype.rootElements.size, "Root elements should be 1")
        assertEquals("base", vehiclePrototype.rootElements[0].name, "Root element should be 'base'")

        // verify child element depths
        // println("Child element depth: ${vehiclePrototype.elementsDepth.joinToString(", ")}")
        assertContentEquals(intArrayOf(0, 1, 1, 1, 2), vehiclePrototype.elementsDepth, "Child element depth should be [0, 1, 1, 1, 2]")

        // verify children indices
        assertContentEquals(intArrayOf(1, 2, 3), vehiclePrototype.childrenIndices[0], "Element [0] children should be [1, 2, 3]")
        assertContentEquals(intArrayOf(), vehiclePrototype.childrenIndices[3], "Element [3] children should be []")
    }

    /**
     * Test prototype creation fails on a tree cycle.
     */
    @Test
    fun badCycle() {
        val unsortedElementPrototypes = arrayListOf(
            VehicleElementPrototype(
                name="base",
                parent=null,
                vehicleName="debug",
                layout=EnumSet.noneOf(VehicleComponentType::class.java),
            ),
            VehicleElementPrototype(
                name="child1",
                parent="base",
                vehicleName="debug",
                layout=EnumSet.noneOf(VehicleComponentType::class.java),
            ),
            VehicleElementPrototype(
                name="child2",
                parent="child3",
                vehicleName="debug",
                layout=EnumSet.noneOf(VehicleComponentType::class.java),
            ),
            VehicleElementPrototype(
                name="child3",
                parent="child2",
                vehicleName="debug",
                layout=EnumSet.noneOf(VehicleComponentType::class.java),
            ),
        )

        val vehiclePrototype = VehiclePrototype.fromUnsortedElements(
            "debug",
            "Debug",
            listOf(),
            unsortedElementPrototypes,
        )

        assertNull(vehiclePrototype, "Vehicle prototype should be null because of cycle")
    }
}